class Packet:
    def __init__(self, packet):
        self.num_cars = packet.num_cars
        self.num_boost = packet.num_boost
        self.num_tiles = packet.num_tiles
        self.num_teams = packet.num_teams
        self.game_cars = []
        self.game_boosts = []
        self.game_ball = GameBall(packet.game_ball)
        self.game_info = GameInfo(packet.game_info)
        self.dropshot_tiles = []
        #self.teams: []

        for car in range(0, self.num_cars):
            self.game_cars.append(Car(packet.game_cars[car]))

        for boost in range(0, self.num_boost):
            self.game_boosts.append(GameBoosts(packet.game_boosts[boost]))
            break

        for tile in range(0, self.num_tiles):
            self.dropshot_tiles.append(TileState(packet.tile_state[tile]))
            break

        #for team in range(0, self.num_teams):
        #    self.teams.append(Team(packet.teams[team]))


class Car:
    def __init__(self, car):
        self.physics = Physics(car.physics)
        self.score_info = ScoreInfo(car.score_info)
        self.is_demolished = car.is_demolished
        self.has_wheel_contact = car.has_wheel_contact
        self.is_super_sonic = car.is_super_sonic
        self.is_bot = car.is_bot
        self.jumped = car.jumped
        self.double_jumped = car.double_jumped
        self.name = car.name
        self.team = car.team
        self.boost = car.boost


class Physics:
    def __init__(self, physics):
        self.location = Vector3(physics.location.x, physics.location.y, physics.location.z)
        self.rotation = Rotation(physics.rotation.pitch, physics.rotation.yaw, physics.rotation.roll)
        self.velocity = Vector3(physics.velocity.x, physics.velocity.y, physics.velocity.z)
        self.angular_velocity = Vector3(physics.angular_velocity.x, physics.angular_velocity.y, physics.angular_velocity.z)


class Vector3:
    def __init__(self, x=0, y=0, z=0):
        self.x = x
        self.y = y
        self.z = z


class Rotation:
    def __init__(self, pitch=0, yaw=0, roll=0):
        self.pitch = pitch
        self.yaw = yaw
        self.roll = roll


class ScoreInfo:
    def __init__(self, score_info):
        self.score = score_info.score
        self.goals = score_info.goals
        self.own_goals = score_info.own_goals
        self.assists = score_info.assists
        self.saves = score_info.saves
        self.shots = score_info.shots
        self.demolitions = score_info.demolitions


class GameBoosts:
    def __init__(self, boost):
        self.is_active = boost.is_active
        self.timer = boost.timer


class GameBall:
    def __init__(self, ball):
        self.physics = Physics(ball.physics)
        self.latest_touch = LatestTouch(ball.latest_touch)
        self.drop_shot_info = DropShotInfo(ball.drop_shot_info)


class LatestTouch:
    def __init__(self, touch):
        self.player_name = touch.player_name
        self.time_seconds = touch.time_seconds
        self.hit_location = Vector3(touch.hit_location.x, touch.hit_location.y, touch.hit_location.z)
        self.hit_normal = Vector3(touch.hit_normal.x, touch.hit_normal.y, touch.hit_normal.z)
        self.team = touch.team


class DropShotInfo:
    def __init__(self, info):
        self.damage_index = info.damage_index
        self.absorbed_force = info.absorbed_force
        self.force_accum_recent = info.force_accum_recent


class GameInfo:
    def __init__(self, game_info):
        self.seconds_elapsed = game_info.seconds_elapsed
        self.game_time_remaining = game_info.game_time_remaining
        self.is_overtime = game_info.is_overtime
        self.is_unlimited_time = game_info.is_unlimited_time
        self.is_round_active = game_info.is_round_active
        self.is_kickoff_pause = game_info.is_kickoff_pause
        self.is_match_ended = game_info.is_match_ended
        self.world_gravity_z = game_info.world_gravity_z
        self.game_speed = game_info.game_speed


class TileState:
    def __init__(self, state):
        self.tile_state = state.Tile_state  # 0 == UNKNOWN
                                            # 1 == FILLED
                                            # 2 == DAMAGED
                                            # 3 == OPEN


class Team:
    def __init__(self, team):
        self.team_index = team.team_index
        self.score = team.score


class FieldInfo:
    def __init__(self, field):
        self.num_boosts = field.num_boosts
        self.num_goals = field.num_goals
        self.boost_pads = []
        self.goals = []

        for boost in range(0, self.num_boosts):
            self.boost_pads.append(BoostPad(field.boost_pads[boost]))

        for goal in range(0, self.num_goals):
            self.goals.append(Goal(field.boost_pads[goal]))


class BoostPad:
    def __init__(self, boost):
        self.location = Vector3(boost.location.x, boost.location.y, boost.location.z)
        self.is_full_boost = boost.is_full_boost


class Goal:
    def __init__(self, goal):
        self.team_num = goal.team_num,
        self.location = Vector3(goal.location.x, goal.location.y, goal.location.z)
        self.direction = Vector3(goal.direction.x, goal.direction.y, goal.direction.z)
